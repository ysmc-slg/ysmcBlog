(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{460:function(s,e,a){"use strict";a.r(e);var t=a(32),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("ul",[a("li",[s._v("Reflection（反射）是被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内")]),s._v(" "),a("li",[s._v("加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（"),a("font",{attrs:{color:"red"}},[s._v("一个类只有一个Class对象")]),s._v("），这个对象就"),a("code",[s._v("包含了完整的类的结构信息")]),s._v("。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射")],1)]),s._v(" "),a("p",[s._v("正常方式：")]),s._v(" "),a("div",{staticClass:"language-mermaid line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("graph LR;\n    A[引入需要的包类名称]--\x3eB[通过new实例化];\n    B--\x3eC[取得实例化对象];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("反射方式：")]),s._v(" "),a("div",{staticClass:"language-mermaid line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("graph LR;\n    A[实例化对象]--\x3eB[getClass方法];\n    B--\x3eC[得到完整的'包类'名称];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[s._v("#")]),s._v(" 功能")]),s._v(" "),a("ul",[a("li",[s._v("在运行时判断任意一个对象所属的类")]),s._v(" "),a("li",[s._v("在运行时构造任意一个类的对象")]),s._v(" "),a("li",[s._v("在运行时判断任意一个类所具有的成员变量和方法")]),s._v(" "),a("li",[s._v("在运行时获取泛型信息")]),s._v(" "),a("li",[s._v("生成动态代理")])])])}),[],!1,null,null,null);e.default=n.exports}}]);