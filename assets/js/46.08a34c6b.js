(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{476:function(a,e,_){"use strict";_.r(e);var v=_(32),r=Object(v.a)({},(function(){var a=this,e=a.$createElement,_=a._self._c||e;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h2",{attrs:{id:"简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[a._v("#")]),a._v(" 简介")]),a._v(" "),_("p",[a._v("以日志的形式来记录"),_("code",[a._v("每个写操作")]),a._v("，将Redis执行过的所有写指令记录下来（读操作不记录），"),_("code",[a._v("只许追加文件但不可以改写文件")]),a._v("，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话根据日志文件的内容将写指令从前到后执行一次已完成数据的恢复工作。")]),a._v(" "),_("p",[a._v("文件路径和名称跟rdb差不多，也是默认在哪个路径下启动的redis，就在那个路径下创建一个"),_("code",[a._v("appendonly.aof")]),a._v("文件")]),a._v(" "),_("h2",{attrs:{id:"aof持久化流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aof持久化流程"}},[a._v("#")]),a._v(" AOF持久化流程")]),a._v(" "),_("ul",[_("li",[a._v("客户端的请求写命令会被append追加到AOF缓冲区内；")]),a._v(" "),_("li",[a._v("AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中")]),a._v(" "),_("li",[a._v("AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；")]),a._v(" "),_("li",[a._v("Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603104758.png",alt:"aof"}})]),a._v(" "),_("h2",{attrs:{id:"aof相关的配置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aof相关的配置"}},[a._v("#")]),a._v(" AOF相关的配置")]),a._v(" "),_("h3",{attrs:{id:"appendonly-appendfilename"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#appendonly-appendfilename"}},[a._v("#")]),a._v(" appendonly，appendfilename")]),a._v(" "),_("p",[a._v("appendfilename：就是文件名这里不多说。")]),a._v(" "),_("p",[a._v("appendonly：aof 默认是不开启的，需要在"),_("code",[a._v("redis.conf")]),a._v("中开启。将"),_("code",[a._v("appendonly")]),a._v("改成 yes")]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603105810.png",alt:"aof"}})]),a._v(" "),_("p",[a._v("重启redis就会看到启动路径下有一个"),_("code",[a._v("appendonly.aof")]),a._v("文件")]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603110300.png",alt:"aof"}})]),a._v(" "),_("p",[_("strong",[a._v("注意")]),a._v("：如图，dump.rdb和appendonly.aof同时存在，也就是说我rdb和aof同时开启了。那么有两个文件redis重启之后，会读哪个文件呢？")]),a._v(" "),_("p",[a._v("为了验证，我们要把rdb和aof都打开，然后添加一些数据")]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603111635.png",alt:"aof"}})]),a._v(" "),_("p",[a._v("然后进入"),_("code",[a._v("appendonly.aof")]),a._v("随便输入一些内容，造成语法错误，使用"),_("code",[a._v("kill")]),a._v("停止redis 然后重启，如果重启不成功或报错，那么就证明，先从"),_("code",[a._v("appendonly.aof")]),a._v("中读内容")]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603112446.png",alt:"aof"}})]),a._v(" "),_("p",[a._v("如图，redis没启动，从侧面证明，当rdb和aof同时存在时，重启redis先读"),_("code",[a._v("appendonly.aof")]),a._v("的内容。由于我们在文件中随便写了一些内容，怎样将错误的内容删除，恢复文件中的数据呢？")]),a._v(" "),_("p",[a._v("在redis安装目录中有一个"),_("code",[a._v("redis-check-aof")]),a._v("文件，在安装目录执行：")]),a._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[a._v("redis"),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("check"),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v("aof "),_("span",{pre:!0,attrs:{class:"token operator"}},[a._v("--")]),a._v("fix appendonly"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("aof\n")])]),a._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[a._v("1")]),_("br")])]),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603140744.png",alt:"aof"}})]),a._v(" "),_("p",[a._v("然后重启redis就可以恢复数据。")]),a._v(" "),_("p",[_("strong",[a._v("原理")]),a._v("：该命令会将文件中不符合redis的命令全部删除，已达到修复的目的。同理使用"),_("code",[a._v("redis-check-rdb")]),a._v("也可以恢复rdb文件")]),a._v(" "),_("h3",{attrs:{id:"appendfsync-aof同步频率"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#appendfsync-aof同步频率"}},[a._v("#")]),a._v(" Appendfsync(AOF同步频率)")]),a._v(" "),_("p",[a._v("简单来说就是，保存"),_("code",[a._v("写操作")]),a._v("的时间，多久记录一次。有三个值分别是：")]),a._v(" "),_("ul",[_("li",[a._v("always：同步持久化，每次发生数据变更会立即记录到磁盘，性能较差但数据完整性比较好")]),a._v(" "),_("li",[a._v("everysec：出厂默认推荐，异步操作，每秒记录，如果一秒内宕机，有数据丢失")]),a._v(" "),_("li",[a._v("no：不同步")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603114317.png",alt:"aof"}})]),a._v(" "),_("h2",{attrs:{id:"rewrite-重写"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rewrite-重写"}},[a._v("#")]),a._v(" Rewrite(重写)")]),a._v(" "),_("p",[a._v("AOF采用文件追加方式，文件会越来越大，为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集。")]),a._v(" "),_("h3",{attrs:{id:"原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),_("p",[a._v("AOF文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后在rename），遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件，这点和快照有点类似。")]),a._v(" "),_("h3",{attrs:{id:"触发机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#触发机制"}},[a._v("#")]),a._v(" 触发机制")]),a._v(" "),_("ol",[_("li",[_("p",[a._v("AOF重写可以由用户使用"),_("code",[a._v("bgrewriteaof")]),a._v("命令手动触发。")])]),a._v(" "),_("li",[_("p",[a._v("在配置文件中通过下面配置可以设置"),_("code",[a._v("rewrite")]),a._v("，实现自动触发，也就是系统自动调用"),_("code",[a._v("bgrewriteaof")])]),a._v(" "),_("ol",[_("li",[a._v("no-appendfsync-on-rewrite：为"),_("code",[a._v("yes")]),a._v("不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据降低数据安全性，提高性能）。为"),_("code",[a._v("no")]),a._v(" 还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞（数据安全，但是性能降低）。一般设置成no")]),a._v(" "),_("li",[a._v("auto-aof-rewrite-min-size：设置重写的基准值，默认是64MB。达到这个值开始重写。")]),a._v(" "),_("li",[a._v("auto-aof-rewrite-perentage：设置重写的基准值，默认文件达到100%时开始重写（现在文件是原来重写后文件的2倍时触发）。")])])])]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603132717.png",alt:"aof"}})]),a._v(" "),_("p",[a._v("系统载入时或者上次重写完毕时，Redis会记录此时AOF大小，设为base_size,")]),a._v(" "),_("p",[a._v("如果Redis的"),_("code",[a._v("AOF当前大小>= base_size +base_size*100%")]),a._v("(默认)且"),_("code",[a._v("当前大小>=64mb(默认)")]),a._v("的情况下，Redis会对AOF进行重写。")]),a._v(" "),_("h3",{attrs:{id:"重写流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#重写流程"}},[a._v("#")]),a._v(" 重写流程")]),a._v(" "),_("ul",[_("li",[a._v("bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。")]),a._v(" "),_("li",[a._v("主进程fork出子进程执行重写操作，保证主进程不会阻塞")]),a._v(" "),_("li",[a._v("子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。\n"),_("ul",[_("li",[a._v("子进程写完新的AOF文件后，向主进程发信号，父进程更新统计信息")]),a._v(" "),_("li",[a._v("主进程把aof_rewrite_buf中的数据写入到新的AOF文件。")])])]),a._v(" "),_("li",[a._v("使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。")])]),a._v(" "),_("p",[_("img",{attrs:{src:"/blogImg/redis/20210603135519.png",alt:"aof"}})]),a._v(" "),_("h2",{attrs:{id:"优势和劣势"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优势和劣势"}},[a._v("#")]),a._v(" 优势和劣势")]),a._v(" "),_("p",[_("strong",[a._v("优势")]),a._v("：")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("备份机制更稳健，丢失数据概率更低。")])]),a._v(" "),_("li",[_("p",[a._v("可读的日志文本，通过操作AOF稳健，可以处理误操作。")])])]),a._v(" "),_("p",[_("strong",[a._v("劣势")]),a._v("：")]),a._v(" "),_("ul",[_("li",[_("p",[a._v("比起RDB占用更多的磁盘空间。")])]),a._v(" "),_("li",[_("p",[a._v("恢复备份速度要慢。")])]),a._v(" "),_("li",[_("p",[a._v("每次读写都同步的话，有一定的性能压力。")])])]),a._v(" "),_("p",[a._v("官方推荐两个都启用。")]),a._v(" "),_("p",[a._v("如果对数据不敏感，可以选单独用RDB。")]),a._v(" "),_("p",[a._v("不建议单独用 AOF，因为可能会出现Bug。")]),a._v(" "),_("p",[a._v("如果只是做纯内存缓存，可以都不用。")])])}),[],!1,null,null,null);e.default=r.exports}}]);