(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{445:function(t,e,a){"use strict";a.r(e);var n=a(32),c=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("只包含一个抽象方法的接口，称为函数式接口。")]),t._v(" "),a("p",[t._v("函数式接口，即适用于函数式编程场景的接口。 而Java中的函数式编程体现就是Lambda，所以函数式接口就是可以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。")]),t._v(" "),a("h2",{attrs:{id:"格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[t._v("#")]),t._v(" 格式")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@FunctionalInterface")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyFunctionalInterface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("ol",[a("li",[t._v('@FunctionalInterface注解只能标记在"有且仅有一个抽象方法"的接口上。')]),t._v(" "),a("li",[t._v("JDK8接口中的静态方法和默认方法，都不算是抽象方法。")]),t._v(" "),a("li",[t._v("接口默认继承java.lang.Object，所以如果接口显示声明覆盖了Object中方法，那么也不算抽象方法。")]),t._v(" "),a("li",[t._v('@FunctionalInterface注解不是必须的，如果一个接口符合"函数式接口"定义，那么加不加该注解都没有影响。加上该注解能够更好地让编译器进行检查。如果编写的不是函数式接口，但是加上了@FunctionInterface，那么编译器会报错。')])])]),t._v(" "),a("h2",{attrs:{id:"系统内置常用的函数式接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统内置常用的函数式接口"}},[t._v("#")]),t._v(" 系统内置常用的函数式接口")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("函数式接口")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("参数类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("返回类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("用途")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Consumer<T>")]),t._v("消费型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("void")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对类型为T的对象应用操作，"),a("br"),t._v("包含方法："),a("code",[t._v("void accept(T t)")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Supplier<T>")]),t._v("供给型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("无")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对类型为T的对象，包含方法："),a("code",[t._v("T get()")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Function<T,R>")]),t._v("函数型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("R")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对类型为T的对象应用操作，"),a("br"),t._v("并返回结果。结果是R类型的对象。"),a("br"),t._v("包含方法："),a("code",[t._v("R apply(T t)")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("Predicate<T>")]),t._v("断定型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("确定类型为T的对象是否满足某约束，"),a("br"),t._v("并返回boolean值。"),a("br"),t._v("包含方法"),a("code",[t._v("boolean test(T t)")])])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("函数式接口")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("参数类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("返回类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("用途")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("BiFunction<T, U, R>")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T,U")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("R")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对类型为 T, U 参数应用操作，返回 R 类型的结 果。"),a("br"),t._v("包含方法为: R apply(T t, U u);")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("UnaryOperator(Function子接口)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对类型为T的对象进行一元运算，"),a("br"),t._v("并返回T类型的结果。"),a("br"),t._v("包含方法为:T apply(T t);")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("BinaryOperator(BiFunction 子接口)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T,T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对类型为T的对象进行二元运算，"),a("br"),t._v("并返回T类型的结果。"),a("br"),t._v("包含方法为: T apply(T t1, T t2);")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("BiConsumer<T, U>")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T,U")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("void")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("对类型为T, U 参数应用操作。 包含方法为: void accept(T t, U u)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("BiPredicate<T,U>")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T,U")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("bollean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("包含方法为: boolean test(T t,U u)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ToIntFunction< T > ToLongFunction< T > ToDoubleFunction< T >")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("int long double")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("分别计算int、long、double值的函数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("IntFunction< R > LongFunction< R > DoubleFunction< R >")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("int long double")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("R")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("参数分别为int、long、double 类型的函数")])])])])])}),[],!1,null,null,null);e.default=c.exports}}]);